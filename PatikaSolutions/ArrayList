using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArrayListt
{
    internal class Program
    {
        static void Main(string[] args)
        {
            // using System.Collections; namespace

            ArrayList liste = new ArrayList();
            liste.Add("Ayşe");
            liste.Add(2);
            liste.Add(true);
            liste.Add('A');

            // İçerisindeki içeriklere erişme:

            Console.WriteLine(liste[1]);
            // ya da
            foreach (var item in liste)
            {
                Console.WriteLine(item);
            }

            Console.WriteLine("*****************");

            // AddRange metodu: Listeye dizi, int, string vs. birden fazla değer ekler.

            string[] renkler = { "Kırmızı", "Sarı", "Yeşil", "Mavi", "Mor" };
            List<int> sayilar = new List<int> { 1, 2, 3, 4, 5, 6 };
            liste.AddRange(renkler);
            liste.AddRange(sayilar);

            foreach (var item2 in liste)
                Console.WriteLine(item2);
            Console.WriteLine("*****************");

            // Sort: Sıralama yapar. İçerde farklı değerler olduğu için sıralama yapamaz.
            // Sıralama için aynı değerler olması gerekir.
            // list.Sort();

            // BinarySearch: İstenilen elemanın indexini bulur. Öncesinde sıralama (sort) yapmak gerekir.
            // Console.WriteLine(liste.BinarySearch(2));
            

            // Reverse Komutu: Düzeni tersine çevirir. Büyükten küçüğe sıralı listeyi küçükten büyüğe sıralayabilirsin.
            // liste.Reverse ();

            // Clear Komutu: Listeyi temizler.
            // liste.Clear();

            Console.ReadLine();
        }
    }
}
